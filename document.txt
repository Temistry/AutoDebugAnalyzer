# 버그리포트-소스코드 자동 연결 시스템 (LLM 기반 버전)

## 1. 개요

### 제작 목적:

개발자 업무 보조를 위해, 버그리포트가 접수되면 의심되는 소스코드 영역을 자동으로 추출하여 개발자에게 제공합니다. LLM(대규모 언어 모델)의 코드 이해 능력을 활용하여 더 정확한 분석 결과를 제공합니다.

### 작동 목표:

- 버그리포트(텍스트)와 소스코드 경로를 입력받아 전처리 후 분석합니다.

- 로컬 LLM을 활용하여 버그리포트와 소스코드 간의 관련성을 문맥적으로 분석합니다.

- 개발자의 도메인 지식을 통합하여 분석 정확도를 향상시킵니다.

- 최종적으로 개발자가 확인할 수 있도록 의심 소스코드 목록과 수정 제안을 출력합니다.

## 2. 시스템 아키텍처

mermaid

Apply to document.txt

flowchart TD

    A[버그리포트 입력] --> B[LLM을 통한 버그 분석]

    C[소스코드 디렉토리] --> D[코드 청크 분할]

    E[개발자 지식 파일] --> B

    B --> F[키워드 및 버그 유형 추출]

    D --> G[키워드 기반 코드 필터링]

    F --> G

    G --> H[LLM 코드 문맥 분석]

    E --> H

    H --> I[관련성 높은 코드 랭킹]

    I --> J[버그 수정 제안 생성]

    J --> K[결과 출력 및 저장]

## 3. 주요 구성 요소

### 3.1. 코어 모듈 (llm_code_analyzer.py)

- LLMCodeAnalyzer 클래스: LLM을 활용한 코드 분석 기능 제공

- analyze_bug_report(): 버그리포트를 분석하여 핵심 정보 추출

- match_with_code_context(): 코드 청크와 버그 간 관련성 분석

- generate_fix_suggestion(): 버그 수정 제안 생성

- load_developer_knowledge(): 개발자 지식 파일 로드 및 처리

### 3.2. 메인 인터페이스 (use_llm_analyzer.py)

- 명령줄 인자 처리 및 전체 흐름 제어

- 소스코드 파일 로드 및 청크 분할

- 버그리포트 로드 및 LLM 분석 요청

- 결과 출력 및 저장

### 3.3. 개발자 지식 통합 (dev_knowledge.txt)

- 클래스/함수명과 설명을 연결하는 매핑 정보

- 알려진 버그 유형 및 패턴 정보

- 도메인 특화 용어 설명

- 프로젝트 구조에 관한 지식

## 4. 기술적 세부 사항

### 4.1. LLM 연동

- 로컬 LLM 서버(LM Studio) 사용

- HTTP API를 통한 프롬프트 전송 및 응답 수신

- 작은 모델(7B)에 최적화된 프롬프트 전략 사용

- 할루시네이션 최소화 및 정확한 코드 참조를 위한 프롬프트 설계

### 4.2. 코드 청크 처리

- 소스 파일을 일정 크기(기본 100줄)의 청크로 분할

- ANSI/CP949 인코딩 지원으로 한글 주석 올바르게 처리

- 효율적인 코드 필터링으로 분석 대상 축소

### 4.3. 개발자 지식 통합

- 텍스트 파일 형식의 지식 데이터베이스

- 카테고리별 구조화(클래스, 함수, 버그 유형 등)

- LLM 프롬프트에 자동 통합하여 분석 정확도 향상

## 5. 구현 세부사항

### 5.1. 프롬프트 최적화

- 7B 모델에 최적화된 명확하고 단계적인 지시사항

- 할루시네이션 방지를 위한 명시적 제약 조건

- 정확한 라인 번호 및 코드 참조 유도

### 5.2. 결과 형식

- 관련성 점수(0-10)

- 의심 라인 및 관련 코드 식별

- 분석 신뢰도 표시

- 구체적인 수정 제안 제공

## 6. 사용 방법

### 6.1. 기본 실행

bash

Apply to document.txt

Run

python use_llm_analyzer.py --bug_report bug_report.txt --source_dir path/to/code

### 6.2. 개발자 지식 통합

bash

Apply to document.txt

Run

python use_llm_analyzer.py --bug_report bug_report.txt --source_dir path/to/code --knowledge dev_knowledge.txt

### 6.3. LLM 서버 설정

bash

Apply to document.txt

Run

python use_llm_analyzer.py --api_url http://localhost:1234 --model model_name

## 7. 향후 확장 계획

### 7.1. 단기 개선 사항

- GUI 인터페이스 추가

- 분석 결과 시각화 개선

- 다양한 LLM 모델 지원

### 7.2. 중장기 개선 사항

- 과거 버그 이력 데이터베이스 구축 및 활용

- 자동 수정 코드 생성 및 테스트

- CI/CD 파이프라인 통합

### 7.3. 장기 비전

- 버그 자동 감지 및 예방 시스템으로 확장

- 코드 리뷰 자동화 기능 통합

- 온-디맨드 개발자 AI 어시스턴트로 발전

## 8. 기대 효과

- 버그 수정 시간 단축 (평균 30-50%)

- 코드 품질 향상 및 유사 버그 재발 방지

- 개발자 생산성 향상 및 디버깅 스트레스 감소

- 지식 공유 및 팀 협업 개선